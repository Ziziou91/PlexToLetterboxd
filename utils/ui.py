"""UI-related utility functions."""
import math

def bold_text(text: str) -> str:
    """Returns a bolded string for printing."""
    return "\033[1m" + text + "\033[0m"

def print_title(title, line_length: int = 70) -> None:
    """Prints the title of the application."""
    title_spacing = int((line_length / 2) - (len(title) / 2))

    print(f"{'=' * line_length}")
    print(f"{'-' * title_spacing}{bold_text(title)}{'-' * title_spacing}")
    print(f"{'=' * line_length}")


def print_token_instructions() -> None:
    """Prints instructions for finding the Plex authentication token."""
    instructions = """
PLEX TOKEN INSTRUCTIONS:
-----------------------
To find your Plex token:

Method 1 - From the Plex Web App:
  1. Log in to Plex Web App (app.plex.tv)
  2. Open any media item and play it
  3. While it's playing, click the three dots (...) and select 'Get Info'
  4. In the URL of the info page, look for '&X-Plex-Token=' followed by your token

Method 2 - From browser cookies:
  1. Log in to Plex Web App
  2. Open browser developer tools (F12 or right-click > Inspect)
  3. Go to the 'Application' or 'Storage' tab
  4. Look for cookies and find 'X-Plex-Token'

Method 3 - From Plex Media Server XML:
  1. Log in to Plex Web App
  2. Go to: https://plex.tv/devices.xml
  3. Search for the 'token' attribute in the XML

Your token is a long alphanumeric string like 'xxxxxxxxxxxxxx'.
Keep this token private as it provides access to your Plex server.
"""
    print(instructions)

def get_user_selection() -> str:
    """Prompt the user to select whose watch history to export.
    
    Returns:
        str: The user's selection ('mine', 'other', or 'cancel')
    """
    print("\nWould you like to export your watch history, or another user?")
    
    valid_options = ["mine", "other", "cancel"]
    user_str = ""
    
    while user_str not in valid_options:
        user_str = input("Type 'mine' or 'other' to select, or 'cancel' to exit: ").lower().strip()
        
        if user_str not in valid_options:
            print("Invalid option. Please try again.")
    
    return user_str



def create_cell(item:str, cell_width:int) -> str:
    """Creates each cell to populate a table of values generated by create_line.
    
    Args:
        item: The content to be displayed in the cell
        cell_width: The width of the cell
        
    Returns:
        The formatted cell string with appropriate spacing
    """
    spacing = cell_width - (len(str(item)) / 2)
    if spacing.is_integer():
        return f"{' '*int(spacing)}{item}{' '*int(spacing)}"
    else:
        return f"{' '*int(math.ceil(spacing))}{item}{' '*int(math.floor(spacing))}"


def create_line(username: str = "USERNAME", email: str = "EMAIL", user_id: str = "ID") -> str:
    """Creates each line in a table of usernames, emails, and user IDs.
    
    Args:
        username: The username to display (default: "USERNAME")
        email: The email to display (default: "EMAIL")
        user_id: The user ID to display (default: "ID")
        
    Returns:
        The formatted line string for the table
    """
    username_cell = create_cell(username, 15)
    email_cell = create_cell(email, 14)
    user_id_cell = create_cell(user_id, 14)
    return f"|{username_cell}|{email_cell}|{user_id_cell}|"


def draw_table(users, line_length: int = 90):
    """Prints all the users for a plex server.
    
    Args:
        users: List of user dictionaries with 'username', 'email', and 'id' keys
        line_length: Length of the horizontal divider lines (default: 90)
    """
    print(f"{'-' * line_length}")
    print(create_line())
    print(f"{'-' * line_length}")
    for user in users:
        print(create_line(user["username"], user["email"], user["id"]))
        print(f"{'-' * line_length}")
